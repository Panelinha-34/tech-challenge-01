generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  SANDWICH
  DRINK
  SIDE_DISH
  DESSERT
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  IN_PREPARATION
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum NotificationStatus {
  PENDING
  SENT
}

enum PaymentMethod {
  QR_CODE
}

model Client {
  id         String    @id @default(uuid())
  name       String
  tax_vat    String    @unique
  email      String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  orders            Order[]
  OrderNotification OrderNotification[]

  @@map("clients")
}

model Order {
  id              String        @id @default(uuid())
  number          BigInt        @unique @default(autoincrement())
  status          OrderStatus
  client_id       String?       @map("client_id")
  visitor_name    String?
  total_price     Decimal
  payment_method  PaymentMethod
  payment_details String?
  created_at      DateTime      @default(now())
  updated_at      DateTime?     @updatedAt

  client             Client?             @relation(fields: [client_id], references: [id])
  orderNotifications OrderNotification[]
  orderComboItems    OrderComboItem[]

  @@map("orders")
}

model OrderNotification {
  id         String             @id @default(uuid())
  order_id   String
  client_id  String
  message    String
  status     NotificationStatus
  created_at DateTime           @default(now())
  updated_at DateTime?          @updatedAt

  order  Order  @relation(fields: [order_id], references: [id])
  client Client @relation(fields: [client_id], references: [id])

  @@map("order_notifications")
}

model OrderComboItem {
  id          String    @id @default(uuid())
  order_id    String
  combo_id    String
  annotation  String?
  quantity    Int
  total_price Decimal
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  order Order @relation(fields: [order_id], references: [id])
  combo Combo @relation(fields: [combo_id], references: [id])

  @@map("order_combo_items")
}

model OrderProductItem {
  id          String    @id @default(uuid())
  order_id    String
  product_id  String
  annotation  String?
  quantity    Int
  total_price Decimal
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  product Product @relation(fields: [product_id], references: [id])

  @@map("order_product_items")
}

model Combo {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  orderComboItems OrderComboItem[]
  comboProducts   ComboProduct[]

  @@map("combos")
}

model ComboProduct {
  id         String    @id @default(uuid())
  combo_id   String
  product_id String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  combo   Combo   @relation(fields: [combo_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("combo_products")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal
  active      Boolean   @default(true)
  category    Category
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  orderProductItems OrderProductItem[]
  comboProducts     ComboProduct[]

  @@map("products")
}
