generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  SANDWICH
  DRINK
  SIDE_DISH
  DESSERT
}

model Client {
  id         String    @id @default(uuid())
  name       String
  tax_vat    String    @unique
  email      String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  orders Order[]

  @@map("clients")
}

model Order {
  id          String    @id @default(uuid())
  status      String
  client_id   String    @map("client_id")
  total_price Decimal
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  client             Client              @relation(fields: [client_id], references: [id])
  orderPayments      OrderPayment[]
  orderNotifications OrderNotification[]
  orderComboItems    OrderComboItem[]
  orderProductItems  OrderProductItem[]

  @@map("orders")
}

model OrderPayment {
  id             String    @id @default(uuid())
  order_id       String
  amount         Decimal
  payment_method String
  status         String
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  order Order @relation(fields: [order_id], references: [id])

  @@map("order_payments")
}

model OrderNotification {
  id         String    @id @default(uuid())
  order_id   String
  message    String
  status     String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  order Order @relation(fields: [order_id], references: [id])

  @@map("order_notifications")
}

model OrderComboItem {
  id          String    @id @default(uuid())
  order_id    String
  combo_id    String
  annotation  String?
  quantity    Int
  total_price Decimal
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  order Order @relation(fields: [order_id], references: [id])
  combo Combo @relation(fields: [combo_id], references: [id])

  @@map("order_combo_items")
}

model OrderProductItem {
  id          String    @id @default(uuid())
  order_id    String
  product_id  String
  annotation  String?
  quantity    Int
  total_price Decimal
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("order_product_items")
}

model Combo {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  orderComboItems OrderComboItem[]
  comboProducts   ComboProduct[]

  @@map("combos")
}

model ComboProduct {
  id         String    @id @default(uuid())
  combo_id   String
  product_id String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  combo   Combo   @relation(fields: [combo_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("combo_products")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal
  category    Category
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  orderProductItems OrderProductItem[]
  comboProducts     ComboProduct[]

  @@map("products")
}
